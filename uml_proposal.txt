@startuml
class FunctionExpression{
    -std::list<std::unique_ptr<FunctionExpression>> functions_list_
    -Type type_
    +std::unique_ptr<FunctionExpression> deriv_ptr(std::size_t _deg=1)
    +Eigen::MatrixXd eval(Eigen::VectorXd _domain_points)
    +std::unique_ptr<FunctionExpression> clone()
    +FunctionExpression operator-()
    +FunctionExpression operator+(const FunctionExpression& that)
    +FunctionExpression operator+(FunctionExpression&& that)
    +FunctionExpression operator-(const FunctionExpression& that)
    +FunctionExpression operator-(FunctionExpression&& that)
    +FunctionExpression operator*(const FunctionExpression& that)
    +FunctionExpression operator*(FunctionExpression&& that)
    +FunctionExpression operator*(double _scalar)
    +FunctionExpression compose(const FunctionExpression& that)
    +FunctionExpression compose(FunctionExpression&& that)
    +FunctionExpression concat(const FunctionExpression& that)
    +FunctionExpression concat(FunctionExpression&& that)
}

class Function{
    -std::list<std::unique_ptr<FunctionExpression>> functions_list_
    -Type type_ = SINGULAR
    +{abstract} std::unique_ptr<FunctionExpression> deriv_ptr(std::size_t _deg=1)
    +{abstract} Eigen::MatrixXd eval(Eigen::VectorXd _domain_points)
    +{abstract} std::unique_ptr<FunctionExpression> clone()
}

class CustomFunction{
    -std::list<std::unique_ptr<FunctionExpression>> functions_list_
    -Type type_ = SINGULAR
    +std::unique_ptr<FunctionExpression> deriv_ptr(std::size_t _deg=1)
    +Eigen::MatrixXd eval(Eigen::VectorXd _domain_points)
    +std::unique_ptr<FunctionExpression> clone()
    +CustomFunction operator+(const CustomFunction& that)
}


Enum Type{
    SIGUNLAR
    SUM
    MULTIPLICATION
    COMPOSITION
    CONCATENATION
}
FunctionExpression <|-- Function
Function <|-- CustomFunction
@enduml
